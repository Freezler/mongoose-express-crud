'use strict'
Object.defineProperties(exports, {
  __esModule: { value: true },
  [Symbol.toStringTag]: { value: 'Module' },
})
const commonJsonSchemas = require('../utils/common-json-schemas.js')
const getEslintDisabledLines = require('../utils/get-eslint-disabled-lines.js')
const isNodeEslintDisabled = require('../utils/is-node-eslint-disabled.js')
const isPartitionComment = require('../utils/is-partition-comment.js')
const getCommentsBefore = require('../utils/get-comments-before.js')
const createEslintRule = require('../utils/create-eslint-rule.js')
const getLinesBetween = require('../utils/get-lines-between.js')
const getSourceCode = require('../utils/get-source-code.js')
const toSingleLine = require('../utils/to-single-line.js')
const rangeToDiff = require('../utils/range-to-diff.js')
const getSettings = require('../utils/get-settings.js')
const isSortable = require('../utils/is-sortable.js')
const sortNodes = require('../utils/sort-nodes.js')
const makeFixes = require('../utils/make-fixes.js')
const complete = require('../utils/complete.js')
const pairwise = require('../utils/pairwise.js')
let defaultOptions = {
  groupKind: 'literals-first',
  specialCharacters: 'keep',
  partitionByComment: false,
  partitionByNewLine: false,
  type: 'alphabetical',
  ignoreCase: true,
  locales: 'en-US',
  order: 'asc',
}
let jsonSchema = {
  properties: {
    partitionByComment: {
      ...commonJsonSchemas.partitionByCommentJsonSchema,
      description:
        'Allows you to use comments to separate the array members into logical groups.',
    },
    groupKind: {
      enum: ['mixed', 'literals-first', 'spreads-first'],
      description: 'Specifies top-level groups.',
      type: 'string',
    },
    partitionByNewLine: {
      description:
        'Allows to use spaces to separate the nodes into logical groups.',
      type: 'boolean',
    },
    specialCharacters: commonJsonSchemas.specialCharactersJsonSchema,
    ignoreCase: commonJsonSchemas.ignoreCaseJsonSchema,
    locales: commonJsonSchemas.localesJsonSchema,
    order: commonJsonSchemas.orderJsonSchema,
    type: commonJsonSchemas.typeJsonSchema,
  },
  additionalProperties: false,
  type: 'object',
}
const sortArrayIncludes = createEslintRule.createEslintRule({
  create: context => ({
    MemberExpression: node => {
      if (
        (node.object.type === 'ArrayExpression' ||
          node.object.type === 'NewExpression') &&
        node.property.type === 'Identifier' &&
        node.property.name === 'includes'
      ) {
        let elements =
          node.object.type === 'ArrayExpression'
            ? node.object.elements
            : node.object.arguments
        sortArray(context, 'unexpectedArrayIncludesOrder', elements)
      }
    },
  }),
  meta: {
    docs: {
      description: 'Enforce sorted arrays before include method.',
      url: 'https://perfectionist.dev/rules/sort-array-includes',
      recommended: true,
    },
    messages: {
      unexpectedArrayIncludesOrder:
        'Expected "{{right}}" to come before "{{left}}".',
    },
    schema: [jsonSchema],
    type: 'suggestion',
    fixable: 'code',
  },
  defaultOptions: [defaultOptions],
  name: 'sort-array-includes',
})
let sortArray = (context, messageId, elements) => {
  if (!isSortable.isSortable(elements)) {
    return
  }
  let settings = getSettings.getSettings(context.settings)
  let options = complete.complete(
    context.options.at(0),
    settings,
    defaultOptions,
  )
  let sourceCode = getSourceCode.getSourceCode(context)
  let eslintDisabledLines = getEslintDisabledLines.getEslintDisabledLines({
    ruleName: context.id,
    sourceCode,
  })
  let formattedMembers = elements.reduce(
    (accumulator, element) => {
      var _a
      if (element === null) {
        return accumulator
      }
      let lastSortingNode =
        (_a = accumulator.at(-1)) == null ? void 0 : _a.at(-1)
      let sortingNode = {
        name:
          element.type === 'Literal'
            ? `${element.value}`
            : sourceCode.getText(element),
        isEslintDisabled: isNodeEslintDisabled.isNodeEslintDisabled(
          element,
          eslintDisabledLines,
        ),
        groupKind: element.type === 'SpreadElement' ? 'spread' : 'literal',
        size: rangeToDiff.rangeToDiff(element, sourceCode),
        node: element,
      }
      if (
        (options.partitionByComment &&
          isPartitionComment.hasPartitionComment(
            options.partitionByComment,
            getCommentsBefore.getCommentsBefore({
              node: element,
              sourceCode,
            }),
          )) ||
        (options.partitionByNewLine &&
          lastSortingNode &&
          getLinesBetween.getLinesBetween(
            sourceCode,
            lastSortingNode,
            sortingNode,
          ))
      ) {
        accumulator.push([])
      }
      accumulator.at(-1).push(sortingNode)
      return accumulator
    },
    [[]],
  )
  let groupKindOrder
  if (options.groupKind === 'literals-first') {
    groupKindOrder = ['literal', 'spread']
  } else if (options.groupKind === 'spreads-first') {
    groupKindOrder = ['spread', 'literal']
  } else {
    groupKindOrder = ['any']
  }
  for (let nodes of formattedMembers) {
    let filteredGroupKindNodes = groupKindOrder.map(groupKind =>
      nodes.filter(
        currentNode =>
          groupKind === 'any' || currentNode.groupKind === groupKind,
      ),
    )
    let sortNodesIgnoringEslintDisabledNodes = ignoreEslintDisabledNodes =>
      filteredGroupKindNodes.flatMap(groupedNodes =>
        sortNodes.sortNodes(groupedNodes, options, {
          ignoreEslintDisabledNodes,
        }),
      )
    let sortedNodes = sortNodesIgnoringEslintDisabledNodes(false)
    let sortedNodesExcludingEslintDisabled =
      sortNodesIgnoringEslintDisabledNodes(true)
    pairwise.pairwise(nodes, (left, right) => {
      let indexOfLeft = sortedNodes.indexOf(left)
      let indexOfRight = sortedNodes.indexOf(right)
      let indexOfRightExcludingEslintDisabled =
        sortedNodesExcludingEslintDisabled.indexOf(right)
      if (
        indexOfLeft < indexOfRight &&
        indexOfLeft < indexOfRightExcludingEslintDisabled
      ) {
        return
      }
      context.report({
        fix: fixer =>
          makeFixes.makeFixes({
            sortedNodes: sortedNodesExcludingEslintDisabled,
            sourceCode,
            options,
            fixer,
            nodes,
          }),
        data: {
          right: toSingleLine.toSingleLine(right.name),
          left: toSingleLine.toSingleLine(left.name),
        },
        node: right.node,
        messageId,
      })
    })
  }
}
exports.default = sortArrayIncludes
exports.defaultOptions = defaultOptions
exports.jsonSchema = jsonSchema
exports.sortArray = sortArray
